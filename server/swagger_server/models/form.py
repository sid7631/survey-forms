# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.form_options import FormOptions  # noqa: F401,E501
from swagger_server import util


class Form(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, type: str=None, text: str=None, options: List[FormOptions]=None, open: bool=None, required: bool=None):  # noqa: E501
        """Form - a model defined in Swagger

        :param type: The type of this Form.  # noqa: E501
        :type type: str
        :param text: The text of this Form.  # noqa: E501
        :type text: str
        :param options: The options of this Form.  # noqa: E501
        :type options: List[FormOptions]
        :param open: The open of this Form.  # noqa: E501
        :type open: bool
        :param required: The required of this Form.  # noqa: E501
        :type required: bool
        """
        self.swagger_types = {
            'type': str,
            'text': str,
            'options': List[FormOptions],
            'open': bool,
            'required': bool
        }

        self.attribute_map = {
            'type': 'type',
            'text': 'text',
            'options': 'options',
            'open': 'open',
            'required': 'required'
        }
        self._type = type
        self._text = text
        self._options = options
        self._open = open
        self._required = required

    @classmethod
    def from_dict(cls, dikt) -> 'Form':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Form of this Form.  # noqa: E501
        :rtype: Form
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this Form.


        :return: The type of this Form.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Form.


        :param type: The type of this Form.
        :type type: str
        """

        self._type = type

    @property
    def text(self) -> str:
        """Gets the text of this Form.


        :return: The text of this Form.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this Form.


        :param text: The text of this Form.
        :type text: str
        """

        self._text = text

    @property
    def options(self) -> List[FormOptions]:
        """Gets the options of this Form.


        :return: The options of this Form.
        :rtype: List[FormOptions]
        """
        return self._options

    @options.setter
    def options(self, options: List[FormOptions]):
        """Sets the options of this Form.


        :param options: The options of this Form.
        :type options: List[FormOptions]
        """

        self._options = options

    @property
    def open(self) -> bool:
        """Gets the open of this Form.


        :return: The open of this Form.
        :rtype: bool
        """
        return self._open

    @open.setter
    def open(self, open: bool):
        """Sets the open of this Form.


        :param open: The open of this Form.
        :type open: bool
        """

        self._open = open

    @property
    def required(self) -> bool:
        """Gets the required of this Form.


        :return: The required of this Form.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required: bool):
        """Sets the required of this Form.


        :param required: The required of this Form.
        :type required: bool
        """

        self._required = required
